# # complete streamlit UI
# # to access API (main.py)

# import streamlit as st
# import requests
# import datetime

# # from exception.exceptions import TradingBotException
# import sys

# BASE_URL = "http://localhost:8000"  # Backend endpoint, base url

# # set configuration
# st.set_page_config(
#     page_title="🌍 Travel Planner Ai",
#     page_icon="🌍",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("🌍 Travel Planner AI Agent")
# st.write("Welcome to the Travel Planner AI Agent !")
# st.write("Plan your Trip in Minutes with AI")
# st.write("")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="example: Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
            
#             # Results for the user input
            
#             markdown_content = f"""# Your Travel Plan

#             Question: {user_input}
            
#             Answer:
            
#             {answer}
            
#             Generated :   {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             Created by:   Udara 's Travel Agent
#             Contact:  udara@travelagent.com

#             This travel plan was generated by AI. Please verify all information, especially prices, operating hours and travel requirements before your trip. Enjoy your Trip !
#             """
            
#             st.markdown(markdown_content)
            
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         st.error(f"The response failed due to: {e}")





# # design 2. this is great! 
# import streamlit as st
# import requests
# import datetime

# BASE_URL = "http://localhost:8000"  # FastAPI backend

# # 🎨 Page configuration
# st.set_page_config(
#     page_title="Travel Planner AI",
#     page_icon="✈️",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# # ✨ Header
# st.markdown("<h1 style='text-align: center; color: #4CAF50;'>🌍 Travel Planner AI Agent</h1>", unsafe_allow_html=True)
# st.markdown("<p style='text-align: center;'>Plan your dream trip in minutes using AI ✨</p>", unsafe_allow_html=True)
# st.divider()

# # 📝 Chat input + messages
# st.markdown("### 📍 How can I help to plan your next trip?")
# st.markdown("*Try something like:* `Plan a 7-day honeymoon to Bali on a low budget.`")

# # Store chat messages
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Chat input form
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("Enter your query:", placeholder="e.g. Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("🎤 Ask AI")

# # Handle response
# if submit_button and user_input.strip():
#     with st.spinner("🤖 Thinking... Generating your travel plan..."):
#         try:
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#             if response.status_code == 200:
#                 answer = response.json().get("answer", "No answer returned.")

#                 # 🧾 Display nicely formatted response
#                 st.success("✅ Here's your travel plan!")
#                 with st.expander("📄 View Full Plan", expanded=True):
#                     st.markdown(f"""
# 🧭 Question:  {user_input}  
# 📌 Answer:   

# {answer}  

# ---

# 🗓️ **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
# 👤 **Created by:** Udara's Travel Agent  
# 📧 **Contact:** udara@travelagent.com  

# > *This travel plan was generated by AI. Please verify all prices, schedules, and entry requirements before booking your trip.*
#                     """)

#             else:
#                 st.error("🚨 Bot failed to respond: " + response.text)

#         except Exception as e:
#             st.error(f"🚫 Something went wrong: {e}")
            
# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []
    

# # Display chat history
# if st.session_state.messages:
#     st.markdown("### 🗨️ Chat History")
#     for msg in st.session_state.messages:
#         st.markdown(f"**User:** {msg['user']}  \n**Bot:** {msg['bot']}")
#         st.session_state.messages.append({"user": user_input, "bot": answer})
        
# # Add a footer
# st.markdown("---")
# st.markdown("<p style='text-align: center;'>Made with ❤️ by Udara</p>", unsafe_allow_html=True)
# st.markdown("<p style='text-align: center;'>Powered by OpenAI GPT-4o</p>", unsafe_allow_html=True)
# st.markdown("<p style='text-align: center;'>Contact: udara@travelagent.com</p>", unsafe_allow_html=True)




# code 3 
import streamlit as st
import requests
import datetime
from fpdf import FPDF
import base64
import uuid

BASE_URL = "http://localhost:8000"

# 🌐 Page config
st.set_page_config(
    page_title="🌍 Travel Planner AI",
    page_icon="✈️",
    layout="centered",
    initial_sidebar_state="expanded",
)

# 📂 Initialize session state for chat sessions
if "chat_sessions" not in st.session_state:
    st.session_state.chat_sessions = {}

if "current_chat_id" not in st.session_state:
    st.session_state.current_chat_id = str(uuid.uuid4())

# ✨ Sidebar: Manage chat sessions
with st.sidebar:
    st.markdown("## 💬 Chat Sessions")
    for chat_id in st.session_state.chat_sessions:
        if st.button(st.session_state.chat_sessions[chat_id]["title"], key=chat_id):
            st.session_state.current_chat_id = chat_id

    st.markdown("---")
    if st.button("➕ New Chat"):
        new_chat_id = str(uuid.uuid4())
        st.session_state.current_chat_id = new_chat_id
        st.session_state.chat_sessions[new_chat_id] = {"title": f"Chat {len(st.session_state.chat_sessions)+1}", "messages": []}

    if st.button("🗑️ Delete Current Chat"):
        if st.session_state.current_chat_id in st.session_state.chat_sessions:
            del st.session_state.chat_sessions[st.session_state.current_chat_id]
            st.session_state.current_chat_id = list(st.session_state.chat_sessions.keys())[0] if st.session_state.chat_sessions else str(uuid.uuid4())

# 💬 Load messages
if st.session_state.current_chat_id not in st.session_state.chat_sessions:
    st.session_state.chat_sessions[st.session_state.current_chat_id] = {"title": "New Chat", "messages": []}

chat_data = st.session_state.chat_sessions[st.session_state.current_chat_id]

# 🎨 Header
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>🌍 Travel Planner AI Agent</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Plan your perfect trip using AI ✨</p>", unsafe_allow_html=True)
st.divider()

# 📥 User input form
st.markdown("### 📍 Ask me about your next trip")
st.markdown("*Try something like:* `Plan a 7-day honeymoon to Bali on a low budget.`")

with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("Ask anything travel-related:", placeholder="e.g. Plan a 5-day trip to Kandy")
    submit_button = st.form_submit_button("✈️ Send")

# 🧠 Process user input
if submit_button and user_input.strip():
    with st.spinner("🤖 Generating travel plan..."):
        try:
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")
                message = {
                    "question": user_input,
                    "answer": answer,
                    "time": datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
                }
                chat_data["messages"].append(message)

            else:
                st.error("Bot failed to respond: " + response.text)
        except Exception as e:
            st.error(f"Request failed due to: {e}")

# 🪄 Show chat messages
if chat_data["messages"]:
    for msg in chat_data["messages"]:
        with st.chat_message("user"):
            st.markdown(f"**You:** {msg['question']}")

        with st.chat_message("assistant"):
            st.markdown(f"**AI Plan:** {msg['answer']}")

    # 📄 Download PDF button
    if st.button("📥 Download Plan as PDF"):
        latest_msg = chat_data["messages"][-1]
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="AI Travel Plan", ln=True, align="C")
        pdf.ln(10)
        pdf.multi_cell(0, 10, f"Question: {latest_msg['question']}\n\nAnswer:\n{latest_msg['answer']}\n\nGenerated on {latest_msg['time']}")
        pdf.output("travel_plan.pdf")

        with open("travel_plan.pdf", "rb") as f:
            base64_pdf = base64.b64encode(f.read()).decode("utf-8")
        pdf_download_link = f'<a href="data:application/pdf;base64,{base64_pdf}" download="travel_plan.pdf">📥 Click here to download your PDF</a>'
        st.markdown(pdf_download_link, unsafe_allow_html=True)
else:
    st.info("Start a chat to generate a travel plan!")

st.markdown("---")
st.markdown("<p style='text-align: center;'>Made with ❤️ by Udara</p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Powered by OpenAI GPT-4o</p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Contact: udara@travelagent.com</p>", unsafe_allow_html=True)
