# # complete streamlit UI
# # to access API (main.py)

# import streamlit as st
# import requests
# import datetime

# # from exception.exceptions import TradingBotException
# import sys

# BASE_URL = "http://localhost:8000"  # Backend endpoint, base url

# # set configuration
# st.set_page_config(
#     page_title="🌍 Travel Planner Ai",
#     page_icon="🌍",
#     layout="centered",
#     initial_sidebar_state="expanded",
# )

# st.title("🌍 Travel Planner AI Agent")
# st.write("Welcome to the Travel Planner AI Agent !")
# st.write("Plan your Trip in Minutes with AI")
# st.write("")

# # Initialize chat history
# if "messages" not in st.session_state:
#     st.session_state.messages = []

# # Display chat history
# st.header("How can I help you in planning a trip? Let me know where do you want to visit.")

# # Chat input box at bottom
# with st.form(key="query_form", clear_on_submit=True):
#     user_input = st.text_input("User Input", placeholder="example: Plan a trip to Goa for 5 days")
#     submit_button = st.form_submit_button("Send")

# if submit_button and user_input.strip():
#     try:
#         # # Show user message
#         # Show thinking spinner while backend processes
#         with st.spinner("Bot is thinking..."):
#             payload = {"question": user_input}
#             response = requests.post(f"{BASE_URL}/query", json=payload)

#         if response.status_code == 200:
#             answer = response.json().get("answer", "No answer returned.")
            
#             # Results for the user input
            
#             markdown_content = f"""# Your Travel Plan

#             Question: {user_input}
            
#             Answer:
            
#             {answer}
            
#             Generated :   {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
#             Created by:   Udara 's Travel Agent
#             Contact:  udara@travelagent.com

#             This travel plan was generated by AI. Please verify all information, especially prices, operating hours and travel requirements before your trip. Enjoy your Trip !
#             """
            
#             st.markdown(markdown_content)
            
#         else:
#             st.error(" Bot failed to respond: " + response.text)

#     except Exception as e:
#         st.error(f"The response failed due to: {e}")



import streamlit as st
import requests
import datetime

BASE_URL = "http://localhost:8000"  # FastAPI backend

# 🎨 Page configuration
st.set_page_config(
    page_title="Travel Planner AI",
    page_icon="✈️",
    layout="centered",
    initial_sidebar_state="expanded",
)

# ✨ Header
st.markdown("<h1 style='text-align: center; color: #4CAF50;'>🌍 Travel Planner AI Agent</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Plan your dream trip in minutes using AI ✨</p>", unsafe_allow_html=True)
st.divider()

# 📝 Chat input + messages
st.markdown("### 📍 How can I help to plan your next trip?")
st.markdown("*Try something like:* `Plan a 7-day honeymoon to Bali on a low budget.`")

# Store chat messages
if "messages" not in st.session_state:
    st.session_state.messages = []

# Chat input form
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("Enter your query:", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("🎤 Ask AI")

# Handle response
if submit_button and user_input.strip():
    with st.spinner("🤖 Thinking... Generating your travel plan..."):
        try:
            payload = {"question": user_input}
            response = requests.post(f"{BASE_URL}/query", json=payload)

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")

                # 🧾 Display nicely formatted response
                st.success("✅ Here's your travel plan!")
                with st.expander("📄 View Full Plan", expanded=True):
                    st.markdown(f"""
🧭 Question:  {user_input}  
📌 Answer:   

{answer}  

---

🗓️ **Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
👤 **Created by:** Udara's Travel Agent  
📧 **Contact:** udara@travelagent.com  

> *This travel plan was generated by AI. Please verify all prices, schedules, and entry requirements before booking your trip.*
                    """)

            else:
                st.error("🚨 Bot failed to respond: " + response.text)

        except Exception as e:
            st.error(f"🚫 Something went wrong: {e}")
            
# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []
    

# Display chat history
if st.session_state.messages:
    st.markdown("### 🗨️ Chat History")
    for msg in st.session_state.messages:
        st.markdown(f"**User:** {msg['user']}  \n**Bot:** {msg['bot']}")
        st.session_state.messages.append({"user": user_input, "bot": answer})
        
# Add a footer
st.markdown("---")
st.markdown("<p style='text-align: center;'>Made with ❤️ by Udara</p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Powered by OpenAI GPT-4o</p>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center;'>Contact: udara@travelagent.com</p>", unsafe_allow_html=True)